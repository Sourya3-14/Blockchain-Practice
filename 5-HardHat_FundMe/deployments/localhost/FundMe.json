{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__notOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDebugConversion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getFunderAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x586aa88c1022f874f7f5c640c200dd5c36d0ea6140148cb1d6fd5fded028b508",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "915649",
    "logsBloom": "0x
    "blockHash": "0x8a43d29e5d92acccdf31c6c6d9604c35d57a062900656f41a738d9c522e6597e",
    "transactionHash": "0x586aa88c1022f874f7f5c640c200dd5c36d0ea6140148cb1d6fd5fded028b508",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "915649",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "15bcd8dda86db8e7b3102892a1809940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__notOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDebugConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getFunderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sourya Adhikary\",\"details\":\"this implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"this implements price feeds as our library\"}},\"title\":\"a contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds the contract\"}},\"notice\":\"this contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport {PriceConvertor} from \\\"./PriceConvertor.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror FundMe__notOwner();\\n\\n//NatSpec\\n/**\\n * @title a contract for crowd funding\\n * @author Sourya Adhikary\\n * @notice this contract is to demo a sample funding contract\\n * @dev this implements price feeds as our library\\n */\\ncontract FundMe {\\n    //Type declarations\\n    using PriceConvertor for uint256;\\n    //State variables\\n    uint256 public constant MINIMUM_USD = 5e17;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_amount;\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Not the owner to withdraw!\\\");\\n        // console.log(\\\"msg.sender: %s\\\", msg.sender);\\n        // console.log(\\\"i_owner: %s\\\", i_owner);\\n        if (msg.sender != i_owner) revert FundMe__notOwner(); //this is more gas efficient as the compiler knows we are checking against this variable no need for any string variables.\\n        _; //add whatever else present in the function\\n    }\\n\\n    //Functions\\n    //constructor\\n    //recieve function\\n    //fallback function\\n    //external function\\n    //public function\\n    //internal function\\n    //private function\\n    //view function\\n    //pure function\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice this function funds the contract\\n     * @dev this implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversion(s_priceFeed) >= MINIMUM_USD,\\n            \\\"No minimum amount sent\\\"\\n        );\\n        //msg.value gets passed to as the first argument of getConversion()\\n        s_funders.push(msg.sender);\\n        s_amount[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        //for loop\\n        //[1,2,3,4]\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_amount[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        //transer 2300 gas gives error\\n        // payable(msg.sender).transfer(address(this).balance);\\n        //send 2300 gas returns bool\\n        // require(payable(msg.sender).send(address(this).balance),\\\"Send Failed\\\");\\n        //call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory fundersCopy = s_funders; //copy the array to save gas\\n        //mapping can't be reset so we need to loop through the fundersCopy array\\n        for (uint256 i = 0; i < fundersCopy.length; i++) {\\n            address funder = fundersCopy[i];\\n            s_amount[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    function getDebugConversion(uint256 amount) public view returns (uint256) {\\n        return amount.getConversion(s_priceFeed);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getFunderAmount(address funder) public view returns (uint256) {\\n        return s_amount[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x7074d88fb40209127e647252617241653ebb26d9ed31ef4b5729bee8fc6acfc3\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConvertor{\\r\\n    function getPrice(AggregatorV3Interface priceFeed) public view returns (uint256) {\\r\\n        // prettier-ignore\\r\\n        (\\r\\n            /* uint80 roundId */,\\r\\n            int256 answer,\\r\\n            /*uint256 startedAt*/,\\r\\n            /*uint256 updatedAt*/,\\r\\n            /*uint80 answeredInRound*/\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        // price of ETH in terms of USD\\r\\n        // 1e18 = 1 Eth = 10^9 gwei = 10^18 wei\\r\\n        //rturns usd in 8 decimal extra format like 200000000000 means = 2000.00000000\\r\\n        //working with 18 decimal places is preferred so multiply with 10^10\\r\\n        return uint256(answer*1e10);//returns price in wei\\r\\n    }\\r\\n    function getVersion(AggregatorV3Interface priceFeed) public view returns(uint256){\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversion(uint256 ethAmount,AggregatorV3Interface priceFeed) public view returns (uint256){\\r\\n        //1 eth = 2000 usd\\r\\n        //1 gwei = 2 usd\\r\\n        //1 wei = 0.000000000002 usd\\r\\n        //1 eth = 2000 * 10^18 wei\\r\\n        //1 wei = 2000 * 10^18 / 10^18 = 2000 usd\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; //convert to USD\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3e23839e076697b08086162b1e936de6bb45d094ae94a0611457d39316d14f0b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063be2693f014610175578063d7b4750c1461018c578063dec91edc146101c957610099565b80633ccfd60b146100a35780635af9804f146100ad5780636b69a592146100ea578063893d20e81461011557610099565b3661009957610097610206565b005b6100a1610206565b005b6100ab6103a9565b005b3480156100b957600080fd5b506100d460048036038101906100cf9190610af8565b6105e3565b6040516100e19190610b34565b60405180910390f35b3480156100f657600080fd5b506100ff61068a565b60405161010c9190610b34565b60405180910390f35b34801561012157600080fd5b5061012a610696565b6040516101379190610b90565b60405180910390f35b34801561014c57600080fd5b506101556106be565b6040516101629190610c0a565b60405180910390f35b610173610206565b005b34801561018157600080fd5b5061018a6106e8565b005b34801561019857600080fd5b506101b360048036038101906101ae9190610af8565b610986565b6040516101c09190610b90565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190610c51565b6109cd565b6040516101fd9190610b34565b60405180910390f35b6706f05b59d3b200003473__$ee5333b9f3bf6448fe7cd0ff78e98acd66$__63eed231849091600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161026c929190610c9c565b602060405180830381865af4158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610cda565b10156102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e590610d64565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a09190610db3565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042e576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104d357600080828154811061045357610452610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080600101915050610431565b50600067ffffffffffffffff8111156104ef576104ee610e16565b5b60405190808252806020026020018201604052801561051d5781602001602082028036833780820191505090505b5060009080519060200190610533929190610a16565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055a90610e76565b60006040518083038185875af1925050503d8060008114610597576040519150601f19603f3d011682016040523d82523d6000602084013e61059c565b606091505b50509050806105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610ed7565b60405180910390fd5b50565b60008173__$ee5333b9f3bf6448fe7cd0ff78e98acd66$__63eed231849091600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610642929190610c9c565b602060405180830381865af415801561065f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106839190610cda565b9050919050565b6706f05b59d3b2000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076d576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107a6575b5050505050905060005b815181101561087557600082828151811061081857610817610de7565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806001019150506107fa565b50600067ffffffffffffffff81111561089157610890610e16565b5b6040519080825280602002602001820160405280156108bf5781602001602082028036833780820191505090505b50600090805190602001906108d5929190610a16565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108fc90610e76565b60006040518083038185875af1925050503d8060008114610939576040519150601f19603f3d011682016040523d82523d6000602084013e61093e565b606091505b5050905080610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990610ed7565b60405180910390fd5b5050565b600080828154811061099b5761099a610de7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b828054828255906000526020600020908101928215610a8f579160200282015b82811115610a8e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a36565b5b509050610a9c9190610aa0565b5090565b5b80821115610ab9576000816000905550600101610aa1565b5090565b600080fd5b6000819050919050565b610ad581610ac2565b8114610ae057600080fd5b50565b600081359050610af281610acc565b92915050565b600060208284031215610b0e57610b0d610abd565b5b6000610b1c84828501610ae3565b91505092915050565b610b2e81610ac2565b82525050565b6000602082019050610b496000830184610b25565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7a82610b4f565b9050919050565b610b8a81610b6f565b82525050565b6000602082019050610ba56000830184610b81565b92915050565b6000819050919050565b6000610bd0610bcb610bc684610b4f565b610bab565b610b4f565b9050919050565b6000610be282610bb5565b9050919050565b6000610bf482610bd7565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b610c2e81610b6f565b8114610c3957600080fd5b50565b600081359050610c4b81610c25565b92915050565b600060208284031215610c6757610c66610abd565b5b6000610c7584828501610c3c565b91505092915050565b610c8781610ac2565b82525050565b610c9681610be9565b82525050565b6000604082019050610cb16000830185610c7e565b610cbe6020830184610c8d565b9392505050565b600081519050610cd481610acc565b92915050565b600060208284031215610cf057610cef610abd565b5b6000610cfe84828501610cc5565b91505092915050565b600082825260208201905092915050565b7f4e6f206d696e696d756d20616d6f756e742073656e7400000000000000000000600082015250565b6000610d4e601683610d07565b9150610d5982610d18565b602082019050919050565b60006020820190508181036000830152610d7d81610d41565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dbe82610ac2565b9150610dc983610ac2565b9250828201905080821115610de157610de0610d84565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e60600083610e45565b9150610e6b82610e50565b600082019050919050565b6000610e8182610e53565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ec1600b83610d07565b9150610ecc82610e8b565b602082019050919050565b60006020820190508181036000830152610ef081610eb4565b905091905056fea264697066735822122046297058e720c53e3e7a57d15a0c79d8dd9e158742488566c7e10d287f3c34d064736f6c63430008180033",
  "libraries": {
    "PriceConvertor": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  },
  "devdoc": {
    "author": "Sourya Adhikary",
    "details": "this implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "this implements price feeds as our library"
      }
    },
    "title": "a contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds the contract"
      }
    },
    "notice": "this contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 328,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 332,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_amount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 337,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}